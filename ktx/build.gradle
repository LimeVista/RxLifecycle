plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.tarSdk
        versionCode versions.verCode
        versionName versions.verName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    afterEvaluate {
        generateDebugBuildConfig.enabled = false
        generateReleaseBuildConfig.enabled = false
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.3.0'
    api project(path: ':core')
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

//// build a jar with source files
task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.source
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        links "https://developer.android.com/reference"
        title "RxLifecycle"
    }
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    afterEvaluate {
        android.libraryVariants.all { variant ->
            variant.javaCompileProvider.configure {
                javadoc.classpath += files(it.classpath.files)
            }
        }
    }
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}